
service: dynamodb-service
app: dynamodb-service
org: jasonoats

plugins:
  localPath: './'
  modules:
    - dbService
    - configureBucket
    - serverless-s3-deploy

custom:
  tableName: users-table
  bucketName: input-data
  inputQueueName: input-queue
  inputTopicName: input-topic
  region: us-east-1
  assets:
    auto: true
    targets:
      - bucket:
          Ref: InputBucket
        files:
          - source: ./
            globs: 'generated.json'

provider:
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:BatchWriteItem
      Resource:
        - { "Fn::GetAtt": [ "DynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - s3:PutBucketNotification
      Resource:
        - { "Fn::GetAtt": [ "InputBucket", "Arn" ] }
    - Effect: Allow
      Action:
        - SQS:SendMessage
      Resource:
        - { "Fn::GetAtt": [ "InputQueue", "Arn" ] }
  environment:
    TABLE_NAME: ${self:custom.tableName}
    BUCKET_NAME: ${self:custom.bucketName}
    APP_NAME: ${self:app}
    INPUT_QUEUE_NAME: ${self:custom.inputQueueName}
    INPUT_TOPIC_NAME: ${self:custom.inputTopicName}
    INPUT_TOPIC_ARN: { "Ref": "InputTopic" }
    REGION: ${self:custom.region}

functions:
  insertIntoDb:
    handler: objects.insertIntoDb
    memorySize: 512
  configureBucket:
    handler: notifications.configureBucket

resources:
  Resources:
    InputBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: 'Retain'
      Properties:
        BucketName: ${self:app}-${self:custom.bucketName}
    InputBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
          PolicyDocument:
            Statement:
              Effect: Allow
              Principal: 
                Service: lambda.amazonaws.com
              Action: s3:PutBucketNotification
              Resource: !GetAtt InputBucket.Arn
          Bucket: !Ref InputBucket
    InputTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:app}-${self:custom.inputTopicName}
    InputTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt InputQueue.Arn
        TopicArn: !Ref InputTopic
    InputTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Statement:
            Effect: Allow
            Principal: "*"
            Action: sns:Publish
            Resource: !Ref InputTopic
            Condition:
              StringEquals:
                "aws:SourceArn": !GetAtt InputBucket.Arn
        Topics:
        - Ref: InputTopic
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S        
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    InputQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:app}-${self:custom.inputQueueName}
    InputQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
          PolicyDocument:
            Statement:
              Effect: Allow
              Principal: "*"
              Action: sqs:SendMessage
              Resource: !GetAtt InputQueue.Arn
              Condition:
                StringEquals:
                  "aws:SourceArn": !Ref InputTopic
          Queues:
          - Ref: InputQueue  